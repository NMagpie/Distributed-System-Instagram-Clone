
// Generated by Akka gRPC. DO NOT EDIT.
package general

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcChannel
import akka.grpc.GrpcClientCloseException
import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils

import akka.grpc.AkkaGrpcGenerated

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
@AkkaGrpcGenerated
trait GeneralClient extends General with GeneralClientPowerApi with AkkaGrpcClient

@AkkaGrpcGenerated
object GeneralClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): GeneralClient =
    new DefaultGeneralClient(GrpcChannel(settings), isChannelOwned = true)
  def apply(channel: GrpcChannel)(implicit sys: ClassicActorSystemProvider): GeneralClient =
    new DefaultGeneralClient(channel, isChannelOwned = false)

  private class DefaultGeneralClient(channel: GrpcChannel, isChannelOwned: Boolean)(implicit sys: ClassicActorSystemProvider) extends GeneralClient {
    import General.MethodDescriptors._

    private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
    private val settings = channel.settings
    private val options = NettyClientUtils.callOptions(settings)

    
    private def statusRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(statusDescriptor, channel, options, settings)
    
    

    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer status(general.StatusParams) if possible.
     */
    
    override def status(): SingleResponseRequestBuilder[general.StatusParams, general.Status] =
      statusRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of status
     */
    def status(in: general.StatusParams): scala.concurrent.Future[general.Status] =
      status().invoke(in)
    

    override def close(): scala.concurrent.Future[akka.Done] =
      if (isChannelOwned) channel.close()
      else throw new GrpcClientCloseException()

    override def closed: scala.concurrent.Future[akka.Done] = channel.closed()
  }
}

@AkkaGrpcGenerated
trait GeneralClientPowerApi {
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer status(general.StatusParams) if possible.
   */
  
  def status(): SingleResponseRequestBuilder[general.StatusParams, general.Status] = ???
  
  

}
