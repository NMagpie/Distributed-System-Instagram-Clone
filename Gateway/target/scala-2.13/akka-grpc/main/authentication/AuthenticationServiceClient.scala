
// Generated by Akka gRPC. DO NOT EDIT.
package authentication

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcChannel
import akka.grpc.GrpcClientCloseException
import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils

import akka.grpc.AkkaGrpcGenerated

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
@AkkaGrpcGenerated
trait AuthenticationServiceClient extends AuthenticationService with AuthenticationServiceClientPowerApi with AkkaGrpcClient

@AkkaGrpcGenerated
object AuthenticationServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): AuthenticationServiceClient =
    new DefaultAuthenticationServiceClient(GrpcChannel(settings), isChannelOwned = true)
  def apply(channel: GrpcChannel)(implicit sys: ClassicActorSystemProvider): AuthenticationServiceClient =
    new DefaultAuthenticationServiceClient(channel, isChannelOwned = false)

  private class DefaultAuthenticationServiceClient(channel: GrpcChannel, isChannelOwned: Boolean)(implicit sys: ClassicActorSystemProvider) extends AuthenticationServiceClient {
    import AuthenticationService.MethodDescriptors._

    private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
    private val settings = channel.settings
    private val options = NettyClientUtils.callOptions(settings)

    
    private def isAuthRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(isAuthDescriptor, channel, options, settings)
    
    
    private def authRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(authDescriptor, channel, options, settings)
    
    
    private def registerRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    
      new ScalaUnaryRequestBuilder(registerDescriptor, channel, options, settings)
    
    

    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer isAuth(authentication.AuthKey) if possible.
     */
    
    override def isAuth(): SingleResponseRequestBuilder[authentication.AuthKey, authentication.AuthBool] =
      isAuthRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of isAuth
     */
    def isAuth(in: authentication.AuthKey): scala.concurrent.Future[authentication.AuthBool] =
      isAuth().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer auth(authentication.UserData) if possible.
     */
    
    override def auth(): SingleResponseRequestBuilder[authentication.UserData, authentication.Result] =
      authRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of auth
     */
    def auth(in: authentication.UserData): scala.concurrent.Future[authentication.Result] =
      auth().invoke(in)
    
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer register(authentication.UserData) if possible.
     */
    
    override def register(): SingleResponseRequestBuilder[authentication.UserData, authentication.Result] =
      registerRequestBuilder(channel.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of register
     */
    def register(in: authentication.UserData): scala.concurrent.Future[authentication.Result] =
      register().invoke(in)
    

    override def close(): scala.concurrent.Future[akka.Done] =
      if (isChannelOwned) channel.close()
      else throw new GrpcClientCloseException()

    override def closed: scala.concurrent.Future[akka.Done] = channel.closed()
  }
}

@AkkaGrpcGenerated
trait AuthenticationServiceClientPowerApi {
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer isAuth(authentication.AuthKey) if possible.
   */
  
  def isAuth(): SingleResponseRequestBuilder[authentication.AuthKey, authentication.AuthBool] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer auth(authentication.UserData) if possible.
   */
  
  def auth(): SingleResponseRequestBuilder[authentication.UserData, authentication.Result] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer register(authentication.UserData) if possible.
   */
  
  def register(): SingleResponseRequestBuilder[authentication.UserData, authentication.Result] = ???
  
  

}
