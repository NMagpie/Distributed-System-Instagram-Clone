
// Generated by Akka gRPC. DO NOT EDIT.
package authentication

import akka.annotation.ApiMayChange

import akka.grpc.AkkaGrpcGenerated


@AkkaGrpcGenerated
trait AuthenticationService {
  
  
  def isAuth(in: authentication.AuthKey): scala.concurrent.Future[authentication.AuthBool]
  
  
  def auth(in: authentication.UserData): scala.concurrent.Future[authentication.Result]
  
  
  def register(in: authentication.UserData): scala.concurrent.Future[authentication.Result]
  
}



@AkkaGrpcGenerated
object AuthenticationService extends akka.grpc.ServiceDescription {
  val name = "authentication.AuthenticationService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    authentication.AuthProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val AuthKeySerializer = new ScalapbProtobufSerializer(authentication.AuthKey.messageCompanion)
    
    val UserDataSerializer = new ScalapbProtobufSerializer(authentication.UserData.messageCompanion)
    
    val AuthBoolSerializer = new ScalapbProtobufSerializer(authentication.AuthBool.messageCompanion)
    
    val ResultSerializer = new ScalapbProtobufSerializer(authentication.Result.messageCompanion)
    
  }

  @ApiMayChange
  @AkkaGrpcGenerated
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val isAuthDescriptor: MethodDescriptor[authentication.AuthKey, authentication.AuthBool] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("authentication.AuthenticationService", "isAuth"))
        .setRequestMarshaller(new Marshaller(AuthKeySerializer))
        .setResponseMarshaller(new Marshaller(AuthBoolSerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val authDescriptor: MethodDescriptor[authentication.UserData, authentication.Result] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("authentication.AuthenticationService", "auth"))
        .setRequestMarshaller(new Marshaller(UserDataSerializer))
        .setResponseMarshaller(new Marshaller(ResultSerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val registerDescriptor: MethodDescriptor[authentication.UserData, authentication.Result] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("authentication.AuthenticationService", "register"))
        .setRequestMarshaller(new Marshaller(UserDataSerializer))
        .setResponseMarshaller(new Marshaller(ResultSerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
